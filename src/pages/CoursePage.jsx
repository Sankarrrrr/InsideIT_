import { Link, useParams } from "react-router-dom";
import { useEffect, useState } from "react";
import { db } from "../services/firebase";
import { doc, getDoc } from "firebase/firestore";
import './CoursePage.css';

export default function CoursePage() {
  const { id } = useParams();
  const [course, setCourse] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchCourse = async () => {
      try {
        const docRef = doc(db, "courses", id);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          setCourse({ id: docSnap.id, ...docSnap.data() });
        } else {
          alert("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞:", error);
        alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞");
      } finally {
        setLoading(false);
      }
    };

    fetchCourse();
  }, [id]);

  if (loading) return <div className="loading-message">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (!course) return <div className="error-message">–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;

  const skillsArray = Array.isArray(course.skills)
    ? course.skills
    : typeof course.skills === "string"
    ? course.skills.split(",").map((s) => s.trim())
    : [];

  return (
    <div className="course-page-container">
      <div className="course-page-content">
        <div className="course-main-content">
          <h1 className="course-title">{course.course}</h1>
          <p className="course-details">{course.description}</p>

          <div className="course-meta">
            <div className="meta-item">
              üìò –£—Ä–æ–≤–µ–Ω—å: {course.level || "–ù–∞—á–∞–ª—å–Ω—ã–π"}
            </div>
            <div className="meta-item">
              ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {course.duration || "5 —á–∞—Å–æ–≤"}
            </div>
            <div className="meta-item">
              üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {course.certificate ? "–î–∞" : "–ù–µ—Ç"}
            </div>
          </div>

          <div className="about-section">
            <h2 className="section-title">–û –∫—É—Ä—Å–µ</h2>
            <div className="about-content">
              {course.about ? (
                <div>
                  {course.about
                    .split(';')
                    .filter(paragraph => paragraph.trim())
                    .map((paragraph, index) => (
                      <p key={index} className="about-paragraph">
                        {paragraph.trim()}
                      </p>
                    ))}
                </div>
              ) : (
                <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</p>
              )}
            </div>
          </div>

          <div className="skills-section">
            <h2 className="skills-title">–ß–µ–º—É –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å</h2>
            <div className="skills-list">
              {skillsArray.length > 0 ? (
                skillsArray.map((skill, i) => (
                  <div key={i} className="skill-item">
                    {skill}
                  </div>
                ))
              ) : (
                <div className="skill-item">–ù–∞–≤—ã–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</div>
              )}
            </div>
          </div>
        </div>

        <div className="course-sidebar">
          <div className="course-price">
            {course.price || "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"}
          </div>
          {course.oldPrice && (
            <div className="course-old-price">
              {course.oldPrice}
            </div>
          )}
          <p className="price-note">–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –¥–æ 25 –º–∞—è</p>

          <Link
            to={`/course/${id}/steps`}
            className="start-course-button"
          >
            –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
          </Link>
          <button className="try-free-button">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
          </button>
        </div>
      </div>
    </div>
  );
}
